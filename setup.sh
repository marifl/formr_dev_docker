#!/usr/bin/env bash
# 
# setup.sh â€” prepares initial configuration for formr Docker development environment.
#
# Usage: ./setup.sh
#
# - Checks for and creates .env and formr_app/formr/config/settings.php if missing
# - Ensures configuration values are identical in both files (keeps them in sync)
# - Compatible with Bash 3.x on MacOS (no associative arrays)

set -e

# Define color functions for better user feedback
GREEN="\033[0;32m"
RED="\033[0;31m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
NORMAL="\033[0m"

print_green() { echo -e "${GREEN}$*${NORMAL}"; }
print_red() { echo -e "${RED}$*${NORMAL}"; }
print_yellow() { echo -e "${YELLOW}$*${NORMAL}"; }
print_blue() { echo -e "${BLUE}$*${NORMAL}"; }

# Paths
ENV_PATH=".env"
SETTINGS_FILE="formr_app/formr/config/settings.php"

# Generate secure random password
generate_password() {
    local length="${1:-16}"
    # Use openssl for cryptographically secure random generation
    openssl rand -base64 "$length" | tr -dc 'A-Za-z0-9!@#$%^&*()_+' | head -c "$length"
}

# Create comprehensive .env file with secure defaults
create_env_file() {
    # Generate secure passwords
    local mariadb_root_password=$(generate_password)
    local mariadb_password=$(generate_password)
    local formr_password=$(generate_password)
    local metrics_password=$(generate_password)

    # Create .env file with comprehensive configuration
    cat > "$ENV_PATH" <<EOF
# Mysql database configuration
MARIADB_ROOT_PASSWORD=$mariadb_root_password
MARIADB_USER=formr_user
MARIADB_DATABASE=formr_db
MARIADB_PASSWORD=$mariadb_password
MARIADB_ROOT_HOST=%

# Password for monitoring metrics with traefik
METRICS_PASSWORD=$metrics_password

# Main domain name for accessing the formr application
MAIN_DOMAIN=formr.local
# FORMR_DOMAIN=192.168.2.107
# OpenCPU domain
OPENCPU_DOMAIN=opencpu:80

# Valid email for letsencrypt domain renewals
FORMR_EMAIL=rform@researchmixtapes.com
FORMR_PASSWORD=$formr_password

FORMR_TAG=v0.30.0
FORMR_APACHE_CONFIG=/etc/apache2/sites-enabled/formr.conf

# time zone
TIMEZONE=Europe/Berlin

#https support = noredirect  ; https support = redirect
HTTPS_METHOD=redirect
EOF

    print_green "Created new .env file with secure, generated configuration."
}

# Get value from .env file (existing function remains the same)
get_env() {
    local key="$1"
    local default="$2"
    local value=""
    
    if [ -f "$ENV_PATH" ]; then
        value=$(grep -E "^${key}=" "$ENV_PATH" | sed -E "s/^${key}=//" | tr -d '"')
    fi
    
    if [ -z "$value" ]; then
        value="$default"
    fi
    
    echo "$value"
}

# Generate settings.php from .env values (existing function remains the same)
generate_settings() {
    # Read env vars (with default fallbacks)
    local db_user="$(get_env MARIADB_USER formr_user)"
    local db_pass="$(get_env MARIADB_PASSWORD generate-password)"
    local db_name="$(get_env MARIADB_DATABASE formr_db)"
    local formr_domain="$(get_env FORMR_DOMAIN localhost)"
    local opencpu_domain="$(get_env OPENCPU_DOMAIN localhost:8080)"
    local email="$(get_env FORMR_EMAIL admin@example.com)"
    local email_pass="$(get_env FORMR_PASSWORD generate-password)"
    local timezone="$(get_env TIMEZONE Europe/Berlin)"
    
    # Generate settings.php with proper heredoc 
    cat > "$SETTINGS_FILE" <<EOF
<?php
// Auto-generated by setup.sh - $(date)
// Warning: Syncs with .env; manual edits may be overwritten!

\$settings['protocol'] = 'http://';
\$settings['admin_domain'] = "$formr_domain";
\$settings['study_domain'] = "$formr_domain";
\$settings['use_study_subdomains'] = false;
\$settings['timezone'] = '$timezone';

// Database
\$settings['database'] = array(
    'datasource' => 'Database/Mysql',
    'persistent' => false,
    'host' => 'formr_db',
    'login' => '$db_user',
    'password' => '$db_pass',
    'database' => '$db_name',
    'prefix' => '',
    'encoding' => 'utf8mb4',
    'unix_socket' => '',
);

// Email config
\$settings['email'] = array(
    'host' => 'localhost',
    'port' => 25,
    'tls' => false,
    'from' => '$email',
    'from_name' => 'formr dev admin',
    'username' => '$email',
    'password' => '$email_pass',
    'use_queue' => true,
);

// OpenCPU
\$settings['opencpu_instance'] = array(
    'local_url' => 'http://opencpu:8004',
    'public_url' => 'http://$opencpu_domain',
    'r_lib_path' => '/usr/local/lib/R/site-library'
);

// Admin email defaults
\$settings['default_admin_email'] = array(
    'host' => 'localhost',
    'port' => 25,
    'tls' => false,
    'from' => '$email',
    'from_name' => 'formr dev admin',
    'username' => '$email', 
    'password' => '$email_pass',
);

// Superadmin account
\$settings['superadmin_email'] = '$email';
\$settings['superadmin_pass'] = '$email_pass';
?>
EOF
}

# Prompt user with yes/no question (existing function remains the same)
confirm() {
    local prompt="$1"
    local default="${2:-n}"
    local response
    
    if [ "$default" = "y" ]; then
        prompt="$prompt [Y/n]: "
    else
        prompt="$prompt [y/N]: "
    fi
    
    read -p "$prompt" response
    response="${response:-$default}"
    
    if echo "$response" | grep -iq "^y"; then
        return 0
    else
        return 1
    fi
}

#############################################################################
# MAIN SCRIPT
#############################################################################

# 1. Always create .env file with secure configuration
create_env_file

# Generate init.sql with credentials from .env
if [ -f "./mysql/generate_init_sql.sh" ]; then
    print_blue "Generating init.sql with credentials from .env..."
    if ./mysql/generate_init_sql.sh; then
        print_green "Successfully generated init.sql with database credentials."
    else
        print_yellow "Warning: Failed to generate init.sql. Database initialization may not use correct passwords."
    fi
else
    print_yellow "Warning: mysql/generate_init_sql.sh not found. Make sure to run sync_config.sh before starting Docker."
fi

# 2. Create or update settings.php
print_blue "Generating $SETTINGS_FILE from .env values..."
mkdir -p "$(dirname "$SETTINGS_FILE")"
generate_settings
print_green "Created/Updated $SETTINGS_FILE based on .env values."

# Create initial zone file
mkdir -p /Users/marcusifland/prj/formr_dev_docker/coredns/zones
echo '$ORIGIN formr.local.
$TTL 60
@ IN A 127.0.0.1
* IN A 127.0.0.1' > /Users/marcusifland/prj/formr_dev_docker/coredns/zones/formr.local.db

echo "Initial zone file created. You can now run docker-compose up -d"

# Final instructions
echo 
print_green "Setup complete! All key configuration defaults are now GUARANTEED identical between .env and settings.php."
echo "Next steps:"
echo "  1. Review .env and $SETTINGS_FILE for your environment (see README)."
echo "  2. When ready, run ./build.sh to build and launch Docker services."
echo "  3. Optionally, run ./configure_settings.sh for interactive PHP settings configuration."
