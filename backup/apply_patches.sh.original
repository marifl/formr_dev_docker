#!/bin/bash

# Source environment variables
source .env

# Function to execute SQL command
execute_sql() {
    docker compose exec -T formr_db sh -c "exec mariadb -h formr_db -uroot -p'${MARIADB_ROOT_PASSWORD}'" <<< "$1"
}

# Create migrations database and table if they don't exist
INIT_SQL="
CREATE DATABASE IF NOT EXISTS formr_migrations;
USE formr_migrations;
CREATE TABLE IF NOT EXISTS applied_patches (
    patch_name VARCHAR(255) PRIMARY KEY,
    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);"

echo "Initializing migrations database..."
execute_sql "$INIT_SQL"

# Get list of all SQL patches and sort them numerically
PATCHES_DIR="./formr_app/formr/sql/patches"
PATCHES=($(ls -1 "$PATCHES_DIR"/*.sql | sort -V))

# Check if we need to seed initial patches (check if table is empty)
CHECK_PATCHES_SQL="USE formr_migrations; SELECT COUNT(*) FROM applied_patches;"
patch_count=$(execute_sql "$CHECK_PATCHES_SQL" | tail -n 1)

# Handle empty or non-numeric values safely
if [ -z "$patch_count" ] || [ "$patch_count" = "" ] || ! [[ "$patch_count" =~ ^[0-9]+$ ]]; then
    patch_count=0
fi

if [ "$patch_count" -eq "0" ]; then
    echo "Seeding migration history with patches up to 039..."
    for patch_file in "${PATCHES[@]}"; do
        patch_name=$(basename "$patch_file")
        # Only seed patches up to 039
        if [[ "$patch_name" =~ ^0[0-3][0-9]_ || "$patch_name" == "040_2fa_support.sql" ]]; then
            SEED_SQL="USE formr_migrations; INSERT INTO applied_patches (patch_name, applied_at) VALUES ('$patch_name', '2024-01-01 00:00:00');"
            execute_sql "$SEED_SQL"
            echo "✓ Seeded patch history: $patch_name"
        fi
    done
fi

# Special handling for 040_2fa_support.sql which might be partially applied
echo "Checking if 040_2fa_support.sql needs special handling..."
CHECK_2FA_SQL="USE ${MARIADB_DATABASE:-formr_db}; SHOW COLUMNS FROM survey_users LIKE '2fa_code';"
has_2fa_column=$(execute_sql "$CHECK_2FA_SQL" | grep -c "2fa_code")

# Handle empty or non-numeric values safely
if [ -z "$has_2fa_column" ] || [ "$has_2fa_column" = "" ] || ! [[ "$has_2fa_column" =~ ^[0-9]+$ ]]; then
    has_2fa_column=0
fi

if [ "$has_2fa_column" -gt "0" ]; then
    # The column exists, check if the patch is marked as applied
    CHECK_PATCH_SQL="USE formr_migrations; SELECT COUNT(*) FROM applied_patches WHERE patch_name = '040_2fa_support.sql';"
    is_040_applied=$(execute_sql "$CHECK_PATCH_SQL" | tail -n 1)
    
    # Handle empty or non-numeric values safely
    if [ -z "$is_040_applied" ] || [ "$is_040_applied" = "" ] || ! [[ "$is_040_applied" =~ ^[0-9]+$ ]]; then
        is_040_applied=0
    fi

    if [ "$is_040_applied" -eq "0" ]; then
        echo "⚠️ 2FA columns already exist but patch is not marked as applied. Marking as applied..."
        MARK_SQL="USE formr_migrations; INSERT INTO applied_patches (patch_name, applied_at) VALUES ('040_2fa_support.sql', NOW());"
        execute_sql "$MARK_SQL"
        echo "✓ Patch 040_2fa_support.sql marked as applied"
    fi
fi

# Special handling for 041_expiring_runs.sql which might be partially applied
echo "Checking if 041_expiring_runs.sql needs special handling..."
CHECK_EXPIRES_SQL="USE ${MARIADB_DATABASE:-formr_db}; SHOW COLUMNS FROM survey_runs LIKE 'expiresOn';"
has_expires_column=$(execute_sql "$CHECK_EXPIRES_SQL" | grep -c "expiresOn")

# Handle empty or non-numeric values safely
if [ -z "$has_expires_column" ] || [ "$has_expires_column" = "" ] || ! [[ "$has_expires_column" =~ ^[0-9]+$ ]]; then
    has_expires_column=0
fi

if [ "$has_expires_column" -gt "0" ]; then
    # The column exists, check if the patch is marked as applied
    CHECK_PATCH_SQL="USE formr_migrations; SELECT COUNT(*) FROM applied_patches WHERE patch_name = '041_expiring_runs.sql';"
    is_041_applied=$(execute_sql "$CHECK_PATCH_SQL" | tail -n 1)
    
    # Handle empty or non-numeric values safely
    if [ -z "$is_041_applied" ] || [ "$is_041_applied" = "" ] || ! [[ "$is_041_applied" =~ ^[0-9]+$ ]]; then
        is_041_applied=0
    fi

    if [ "$is_041_applied" -eq "0" ]; then
        echo "⚠️ expiresOn column already exists but patch is not marked as applied. Marking as applied..."
        MARK_SQL="USE formr_migrations; INSERT INTO applied_patches (patch_name, applied_at) VALUES ('041_expiring_runs.sql', NOW());"
        execute_sql "$MARK_SQL"
        echo "✓ Patch 041_expiring_runs.sql marked as applied"
    fi
fi

# Special handling for 042_run_expiry_reminders.sql which might be partially applied
echo "Checking if 042_run_expiry_reminders.sql needs special handling..."
CHECK_TABLE_SQL="USE ${MARIADB_DATABASE:-formr_db}; SHOW TABLES LIKE 'survey_run_expiry_reminders';"
has_reminders_table=$(execute_sql "$CHECK_TABLE_SQL" | grep -c "survey_run_expiry_reminders")

# Handle empty or non-numeric values safely
if [ -z "$has_reminders_table" ] || [ "$has_reminders_table" = "" ] || ! [[ "$has_reminders_table" =~ ^[0-9]+$ ]]; then
    has_reminders_table=0
fi

if [ "$has_reminders_table" -gt "0" ]; then
    # The table exists, check if the patch is marked as applied
    CHECK_PATCH_SQL="USE formr_migrations; SELECT COUNT(*) FROM applied_patches WHERE patch_name = '042_run_expiry_reminders.sql';"
    is_042_applied=$(execute_sql "$CHECK_PATCH_SQL" | tail -n 1)
    
    # Handle empty or non-numeric values safely
    if [ -z "$is_042_applied" ] || [ "$is_042_applied" = "" ] || ! [[ "$is_042_applied" =~ ^[0-9]+$ ]]; then
        is_042_applied=0
    fi

    if [ "$is_042_applied" -eq "0" ]; then
        echo "⚠️ survey_run_expiry_reminders table already exists but patch is not marked as applied. Marking as applied..."
        MARK_SQL="USE formr_migrations; INSERT INTO applied_patches (patch_name, applied_at) VALUES ('042_run_expiry_reminders.sql', NOW());"
        execute_sql "$MARK_SQL"
        echo "✓ Patch 042_run_expiry_reminders.sql marked as applied"
    fi
fi

# Apply each patch if not already applied
for patch_file in "${PATCHES[@]}"; do
    patch_name=$(basename "$patch_file")
    
    # Check if patch was already applied
    CHECK_SQL="USE formr_migrations; SELECT COUNT(*) FROM applied_patches WHERE patch_name = '$patch_name';"
    is_applied=$(execute_sql "$CHECK_SQL" | tail -n 1)
    
    # Handle empty or non-numeric values safely
    if [ -z "$is_applied" ] || [ "$is_applied" = "" ] || ! [[ "$is_applied" =~ ^[0-9]+$ ]]; then
        is_applied=0
    fi
    
    if [ "$is_applied" -eq "0" ]; then
        echo "Applying patch: $patch_name"
        
        # Apply the patch to formr_db
        if docker compose exec -T formr_db sh -c "exec mariadb -h formr_db -uroot -p'${MARIADB_ROOT_PASSWORD}' ${MARIADB_DATABASE:-formr_db}" < "$patch_file"; then
            # Record successful application
            RECORD_SQL="USE formr_migrations; INSERT INTO applied_patches (patch_name) VALUES ('$patch_name');"
            execute_sql "$RECORD_SQL"
            echo "✓ Successfully applied and recorded: $patch_name"
        else
            echo "✗ Failed to apply patch: $patch_name"
            exit 1
        fi
    else
        echo "⚡ Skipping already applied patch: $patch_name"
    fi
done

echo "All patches processed successfully!"
